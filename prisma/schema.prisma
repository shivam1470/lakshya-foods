generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?
  role              String    @default("customer")
  phone             String?
  company           String?
  address           String?
  city              String?
  country           String?
  isActive          Boolean   @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  accounts          Account[]
  assignedInquiries Inquiry[] @relation("AssignedInquiries")
  inquiries         Inquiry[] @relation("UserInquiries")
  orders            Order[]
  sessions          Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Inquiry {
  id           String   @id @default(cuid())
  name         String
  email        String
  phone        String?
  company      String?
  message      String
  products     String?
  status       String   @default("new")
  priority     String   @default("medium")
  userId       String?
  assignedToId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  assignedTo   User?    @relation("AssignedInquiries", fields: [assignedToId], references: [id])
  user         User?    @relation("UserInquiries", fields: [userId], references: [id])
}

model Product {
  id          String      @id @default(cuid())
  name        String
  description String?
  category    String
  price       Float?
  unit        String      @default("kg")
  image       String?
  isActive    Boolean     @default(true)
  stock       Int         @default(0)
  minOrder    Int         @default(1)
  maxOrder    Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItems  OrderItem[]
}

model Order {
  id                String      @id @default(cuid())
  orderNumber       String      @unique
  userId            String
  status            String      @default("pending")
  totalAmount       Float       @default(0)
  currency          String      @default("INR")
  notes             String?
  shippingAddress   String?
  billingAddress    String?
  paymentStatus     String      @default("pending")
  paymentMethod     String?
  trackingNumber    String?
  estimatedDelivery DateTime?
  deliveredAt       DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  user              User        @relation(fields: [userId], references: [id])
  items             OrderItem[]
}

model OrderItem {
  id         String   @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int
  unitPrice  Float
  totalPrice Float
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id])
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}
